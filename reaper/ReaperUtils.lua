---@diagnostic disable: undefined-global

local ReaperUtils = {} -- create object


-- ===========================================
-- Check if vars correctly loaded
if not ReaperVars then
    print("[REAPER] Error on utils load")
    os.exit()
end
-- ===========================================




-- Get team of player
function ReaperUtils:GetTeam(p)
    -- Permanent team object check
    if ReaperVars:GetTeamCheckType() == "Rush Point" then
        return p and game:GetService("Players")[p.Name].PermanentTeam.Value
    end
    -- Object check
    if ReaperVars:GetTeamCheckType() == "Team" then
        return p and p.Team
    end

    return p and p.TeamColor
end

-- Check if is team mate
function ReaperUtils:IsTeamMate(p)
    if not ReaperVars:IsTeamCheck() then
        return false
    end
    return ReaperUtils:GetTeam(p) == ReaperUtils:GetTeam(plr)
end


-- Get primary part of a player body
function ReaperUtils:GetPrimaryPart(obj)

    -- Primary already set
    if obj.PrimaryPart then
        return obj.PrimaryPart
    end

    -- Obj is part
    if obj:IsA("BasePart") then
        return obj:IsA("BasePart")
    end

    -- Part inside obj
    if obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChildWhichIsA("BasePart") then
        return obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChildWhichIsA("BasePart")
    end

    -- Primary inside character
    if obj:IsA("Player") and obj.Character:FindFirstChild("HumanoidRootPart") then
        return obj.Character:FindFirstChild("HumanoidRootPart")
    end

    return false
end

function ReaperUtils:GetHead(obj)
    -- Ensure primary part
    local PrimaryPart = ReaperUtils:GetPrimaryPart(obj)
    -- Get head
    if PrimaryPart then
        return PrimaryPart.FindFirstChild(v, "Head")
    end
    -- Return nil if not found
    return nil
end




return ReaperUtils