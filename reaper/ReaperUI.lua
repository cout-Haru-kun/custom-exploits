---@diagnostic disable: undefined-global
print("[REAPER] UI module loading")


local ReaperUI = {} -- create object



-- ===========================================
-- Check if vars correctly loaded
if not ReaperVars then
    print("[REAPER] Error on ui load")
    os.exit()
end
-- ===========================================



-- ===========================================
-- Load script for ui
if not VoidLib then
    getgenv().VoidLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/vozoid/ui-libraries/main/drawing/void/source.lua"))()
end

-- Check if correctly loaded
if not VoidLib then
    print("[REAPER] Error on ui library load")
    os.exit()
end
-- ===========================================







-- ===========================================

function ReaperUI:Load()
    getgenv().VoidLib:Watermark("Reaper v1.0")
    local gui = getgenv().VoidLib:Load{
        Name = "Reaper v1.0",
        SizeX = 600,
        SizeY = 650,
        Theme = "Midnight",
        Extension = "json", -- config file extension
        Folder = ".reaper" -- config folder name
    }
    

    local espTab = gui:Tab("ESP")
    local designTab = gui:Tab("Design")


    -- ================================================= ESP SETTINGS
    local settingsSec = espTab:Section{
        Name = "ESP",
        Side = "Left"
    }
    if settingsSec ~= nil then -- Just to close the bracket in vscode

        -- Toggle esp
        settingsSec:Toggle{
            Name = "ESP Enabled",
            Flag = "ESP",
            Default = ReaperVars:IsESPEnabled(),
            Callback  = function(bool)
                ReaperVars:SetESPEnabled(bool)
                ESP:Toggle(bool)
                -- Add all players again
                if bool then
                    for i,v in pairs(game.Players:GetChildren()) do
                        AddPlayerToESP(v)
                    end
                    if workspace.MapFolder and workspace.MapFolder.Players then
                        for i,v in pairs(workspace.MapFolder.Players:GetChildren()) do
                            AddPlayerToESP(v)
                            print("add")
                            print(v.Name)
                        end
                    end
                end
            end
        }
        


        settingsSec:Separator("")
        -- Modify team check
        settingsSec:Toggle{
            Name = "Team Check",
            Flag = "Team Check Enabled",
            Default = ReaperVars:IsTeamCheck(),
            Callback  = function(bool)
                ReaperVars:SetTeamCheck(bool)
            end
        }
        settingsSec:Toggle{
            Name = "Team Visible",
            Flag = "Team Visibility",
            Default = ReaperVars:IsTeamVisible(),
            Callback  = function(bool)
                ReaperVars:SetTeamVisible(bool)
            end
        }
        settingsSec:Dropdown{
            Name = "Dropdown",
            Default = ReaperVars:GetTeamCheckType(),
            Content = {
                "Color", -- Team color check
                "Team", -- Team object check
                "Permanent" -- Team permanent object check
            },
            Flag = "Team Check Type",
            Callback = function(option)
                ReaperVars:SetTeamCheckType(tostring(option))
            end
        }


        settingsSec:Separator("")
        -- Modify distance settings
        settingsSec:Toggle{
            Name = "Show Distance",
            Flag = "Show Distance Enabled",
            Default = ReaperVars:IsShowDistance(),
            Callback  = function(bool)
                ReaperVars:SetShowDistance(bool)
            end
        }
        settingsSec:Slider{
            Name = "Max Distance",
            Text = "[value]",
            --Default = 0.1,
            Min = 50,
            Max = 3000,
            Float = 0.1,
            Flag = "Max Distance Showed",
            Callback = function(value)
                ReaperVars:SetMaxDistance(value)
            end
        }



        settingsSec:Separator("")
        -- Modify name and health settings
        settingsSec:Toggle{
            Name = "Show Name",
            Flag = "Show Name Enabled",
            Default = ReaperVars:IsShowName(),
            Callback  = function(bool)
                ReaperVars:SetShowName(bool)
            end
        }
        settingsSec:Toggle{
            Name = "Show Health",
            Flag = "Show Health Enabled",
            Default = ReaperVars:IsShowHealth(),
            Callback  = function(bool)
                ReaperVars:SetShowHealth(bool)
            end
        }


        settingsSec:Separator("")
        -- Modify esp indicators settings
        settingsSec:Toggle{
            Name = "Show Boxes",
            Flag = "Show Boxes Enabled",
            Default = ReaperVars:IsShowBoxes(),
            Callback  = function(bool)
                ReaperVars:SetShowBoxes(bool)
            end
        }
        settingsSec:Toggle{
            Name = "Show Tracers",
            Flag = "Show Tracers Enabled",
            Default = ReaperVars:IsShowTracers(),
            Callback  = function(bool)
                ReaperVars:SetShowTracers(bool)
            end
        }
        settingsSec:Toggle{
            Name = "Show Head Dot",
            Flag = "Show Head Dot Enabled",
            Default = ReaperVars:IsShowHeadDot(),
            Callback  = function(bool)
                ReaperVars:SetShowHeadDot(bool)
            end
        }
    end









    -- ================================================= CONFIGURATION SETTINGS

    local keybindSec = espTab:Section{
        Name = "Keybinds & Configuration",
        Side = "Right"
    }
    if keybindSec ~= nil then -- Just to close the bracket in vscode
        keybindSec:Separator("")
    
        -- Toggle menu/esp
        VoidLib.holder.Visible = false -- Set to false for init of keybind
        keybindSec:Label("Toggle Menu")
        keybindSec:Keybind{
            Blacklist = {Enum.UserInputType.MouseButton1},
            Flag = "Toggle Menu",
            Mode = "Toggle",
            Callback = function(key, fromsetting)
                VoidLib.holder.Visible = not VoidLib.holder.Visible
                VoidLib.cursor.Visible = VoidLib.holder.Visible
            end
        }
        keybindSec:Label("Toggle ESP")
        keybindSec:Keybind{
            Blacklist = {Enum.UserInputType.MouseButton1},
            Flag = "Toggle ESP",
            Mode = "Toggle",
            Callback = function(key, fromsetting)
                ReaperVars:SetESPEnabled(not ReaperVars:IsESPEnabled())
            end
        }
    
    
        -- Save & load configuration
        keybindSec:Separator("")
        keybindSec:Button{
            Name = "Load Config",
            Callback  = function()
                VoidLib:LoadConfig("config", true)
            end
        }
    
        keybindSec:Button{
            Name = "Save Config",
            Callback  = function()
                VoidLib:SaveConfig("config", true)
            end
        }
    

        -- destruct gui 
        espTab:Section{
            Name = "Self destruct",
            Side = "Right"
        }:Button{
            Name = "Self Destruct",
            Callback  = function()
                VoidLib:Unload() -- Destroy gui
                os.exit()
            end
        }
    end















    -- ================================================= DESIGN SETTINGS
    local designSec = designTab:Section{
        Name = "Design",
        Side = "Left"
    }
    if (designSec ~= nil) then

        -- Allies color
        designTab:Section{
            Name = "Allies color",
            Side = "Left"
        }:ColorPicker{
            Default = ReaperVars:GetAlliesColor(),
            DefaultAlpha = 0.5,
            Flag = "Allies color",
            Callback = function(color)
                ReaperVars:SetAlliesColor(Color3.fromRGB(math.round(color.R * 255), math.round(color.G * 255), math.round(color.B * 255)))
            end
        }

        -- Enemies color
        designTab:Section{
            Name = "Enemies color",
            Side = "Left"
        }:ColorPicker{
            Default = ReaperVars:GetEnemiesColor(),
            DefaultAlpha = 0.5,
            Flag = "Enemies color",
            Callback = function(color)
                ReaperVars:SetEnemiesColor(Color3.fromRGB(math.round(color.R * 255), math.round(color.G * 255), math.round(color.B * 255)))
            end
        }



        -- destruct gui 
        designTab:Section{
            Name = "Self destruct",
            Side = "Right"
        }:Button{
            Name = "Self Destruct",
            Callback  = function()
                    VoidLib:Unload() -- Destroy gui
                    os.exit()
            end
        }
    end
end


-- ===========================================


print("[REAPER] UI module loaded")
return ReaperUI