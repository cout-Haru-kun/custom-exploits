---@diagnostic disable: undefined-global

local ReaperUI = {} -- create object
local ReaperTitle = "Reaper v1.0"



-- ===========================================
-- Check if vars correctly loaded
if not ReaperVars then
    print("[REAPER] Error on ui load")
    os.exit()
end
-- ===========================================



-- ===========================================
-- Load script for ui
if not VoidLib then
    getgenv().VoidLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/vozoid/ui-libraries/main/drawing/void/source.lua"))()
end

-- Check if correctly loaded
if not VoidLib then
    print("[REAPER] Error on ui library load")
    os.exit()
end
-- ===========================================






-- ===========================================

function ReaperUI:Load()
    getgenv().VoidLib:Watermark(ReaperTitle)
    local gui = getgenv().VoidLib:Load{
        Name = ReaperTitle,
        SizeX = 600,
        SizeY = 650,
        Theme = "Midnight",
        Extension = "json", -- config file extension
        Folder = ".reaper" -- config folder name
    }
    
    local espTab = gui:Tab("ESP")
    local settingsTab = gui:Tab("Settings")


    -- ============================================================================================= ESP TAB
    -- ================================================= TOGGLE ESP
    local espSec = espTab:Section{
        Name = "ESP",
        Side = "Left"
    }

    -- Toggle esp
    espSec:Toggle{
        Name = "ESP",
        Flag = "ESP Enabled",
        Default = ReaperVars:IsESPEnabled(),
        Callback  = function(bool)
            ReaperVars:SetESPEnabled(bool)
        end
    }

    -- ================================================= ESP INDICATORS
    local espIndicatorsSec = espTab:Section{
        Name = "Indicators",
        Side = "Left"
    }

    espIndicatorsSec:Toggle{
        Name = "Show Boxes",
        Flag = "Show Boxes Enabled",
        Default = ReaperVars:IsShowBoxes(),
        Callback  = function(bool)
            ReaperVars:SetShowBoxes(bool)
        end
    }
    espIndicatorsSec:Toggle{
        Name = "Show Tracers",
        Flag = "Show Tracers Enabled",
        Default = ReaperVars:IsShowTracers(),
        Callback  = function(bool)
            ReaperVars:SetShowTracers(bool)
        end
    }
    espIndicatorsSec:Toggle{
        Name = "Show Head Dot",
        Flag = "Show Head Dot Enabled",
        Default = ReaperVars:IsShowHeadDot(),
        Callback  = function(bool)
            ReaperVars:SetShowHeadDot(bool)
        end
    }

    -- ================================================= ESP TEAM CHECKS
    local espTeamSec = espTab:Section{
        Name = "Team Options",
        Side = "Left"
    }

    espTeamSec:Toggle{
        Name = "Team Check",
        Flag = "Team Check Enabled",
        Default = ReaperVars:IsTeamCheck(),
        Callback  = function(bool)
            ReaperVars:SetTeamCheck(bool)
        end
    }
    espTeamSec:Toggle{
        Name = "Team Visible",
        Flag = "Team Visibility",
        Default = ReaperVars:IsTeamVisible(),
        Callback  = function(bool)
            ReaperVars:SetTeamVisible(bool)
        end
    }
    espTeamSec:Dropdown{
        Name = "Dropdown",
        Default = ReaperVars:GetTeamCheckType(),
        Content = {
            "Color", -- Team color check
            "Team", -- Team object check
            "Permanent" -- Team permanent object check
        },
        Flag = "Team Check Type",
        Callback = function(option)
            ReaperVars:SetTeamCheckType(tostring(option))
        end
    }

    -- ================================================= ESP OPTIONAL INDICATORS
    local espOptIndicatorsSec = espTab:Section{
        Name = "Optional Indicators",
        Side = "Left"
    }

    espOptIndicatorsSec:Toggle{
        Name = "Show Name",
        Flag = "Show Name Enabled",
        Default = ReaperVars:IsShowName(),
        Callback  = function(bool)
            ReaperVars:SetShowName(bool)
        end
    }
    espOptIndicatorsSec:Toggle{
        Name = "Show Health",
        Flag = "Show Health Enabled",
        Default = ReaperVars:IsShowHealth(),
        Callback  = function(bool)
            ReaperVars:SetShowHealth(bool)
        end
    }
    espOptIndicatorsSec:Toggle{
        Name = "Show Distance",
        Flag = "Show Distance Enabled",
        Default = ReaperVars:IsShowDistance(),
        Callback  = function(bool)
            ReaperVars:SetShowDistance(bool)
        end
    }
    espOptIndicatorsSec:Slider{
        Name = "Max Distance",
        Text = "[value]",
        Min = 50,
        Max = 3000,
        Float = 1,
        Flag = "Max Distance Showed",
        Callback = function(value)
            ReaperVars:SetMaxDistance(value)
        end
    }




    -- ================================================= ESP KEYBINDS
    local keybindSec = espTab:Section{
        Name = "Keybinds",
        Side = "Right"
    }
    keybindSec:Label("Toggle ESP")
    keybindSec:Keybind{
        Blacklist = {Enum.UserInputType.MouseButton1},
        Flag = "Toggle ESP",
        Mode = "Toggle",
        Callback = function(key, fromsetting)
            ReaperVars:SetESPEnabled(not ReaperVars:IsESPEnabled())
        end
    }

    -- ================================================= ESP COLORS
    espTab:Section{
        Name = "Allies color",
        Side = "Right"
    }:ColorPicker{
        Default = ReaperVars:GetAlliesColor(),
        DefaultAlpha = 0.5,
        Flag = "Allies color",
        Callback = function(color)
            ReaperVars:SetAlliesColor(Color3.fromRGB(math.round(color.R * 255), math.round(color.G * 255), math.round(color.B * 255)))
        end
    }
    espTab:Section{
        Name = "Enemies color",
        Side = "Right"
    }:ColorPicker{
        Default = ReaperVars:GetEnemiesColor(),
        DefaultAlpha = 0.5,
        Flag = "Enemies color",
        Callback = function(color)
            ReaperVars:SetEnemiesColor(Color3.fromRGB(math.round(color.R * 255), math.round(color.G * 255), math.round(color.B * 255)))
        end
    }














    -- ============================================================================================= SETTINGS TAB
    -- ================================================= KEYBIND
    VoidLib.holder.Visible = false -- Set to false for init of keybind
    local keybindSetSec = settingsTab:Section{
        Name = "Keybinds",
        Side = "Left"
    }

    keybindSetSec:Label("Toggle Menu")
    keybindSetSec:Keybind{
        Blacklist = {Enum.UserInputType.MouseButton1},
        Flag = "Toggle Menu",
        Mode = "Toggle",
        Callback = function(key, fromsetting)
            VoidLib.holder.Visible = not VoidLib.holder.Visible
            VoidLib.cursor.Visible = VoidLib.holder.Visible
        end
    }

    -- ================================================= CONFIGURATION
    local configurationSec = settingsTab:Section{
        Name = "Configuration",
        Side = "Right"
    }

    

    configurationSec:Button{
        Name = "Load Config",
        Callback  = function()
            VoidLib:LoadConfig("config", true)
        end
    }
    configurationSec:Button{
        Name = "Save Config",
        Callback  = function()
            VoidLib:SaveConfig("config", true)
        end
    }


    -- ================================================= SELF DESTRUCT
    settingsTab:Section{
        Name = "Self destruct",
        Side = "Right"
    }:Button{
        Name = "Self Destruct",
        Callback  = function()
            VoidLib.holder.Visible = not VoidLib.holder.Visible -- Hide first to avoid visual glitch
            VoidLib.cursor.Visible = VoidLib.holder.Visible
            VoidLib:Unload() -- Destroy gui
        end
    }
end
-- ===========================================


-- ReaperUI:Load() -- For testing
return ReaperUI