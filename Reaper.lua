-- ========================= USEFUL VARS =======================
local lplr = game.Players.LocalPlayer
local camera = game:GetService("Workspace").CurrentCamera
local CurrentCamera = workspace.CurrentCamera
local worldToViewportPoint = CurrentCamera.worldToViewportPoint

local HeadOff = Vector3.new(0, 0.5, 0)
local LegOff = Vector3.new(0,3,0)

-- ========================= SETTINGS VARS =======================
_G.ReaperESPEnabled = true

_G.ReaperTeamCheck = true
_G.ReaperTeamVisible = false
_G.ReaperTeamCheckType = "Color"


_G.ReaperTeamColor = Color3.fromRGB(241, 5, 241)
_G.ReaperEnemyColor = Color3.fromRGB(255, 0, 0)


function IsTeam(player)
    if _G.ReaperTeamCheck == true then
        -- Color check
        if _G.ReaperTeamCheckType == "Color" then
            return lplr.TeamColor == player.TeamColor
        end
        -- Object check
        if _G.ReaperTeamCheckType == "Team" then
            return lplr.Team == player.Team
        end
        -- Permanent object check
        if _G.ReaperTeamCheckType == "Permanent" then
            return lplr.PermanentTeam.Value == player.PermanentTeam.Value
        end
    end
    return false;
end

function GetColor(Player)
    print("color")
    if IsTeam(Player) then
        print("color1")
        return _G.ReaperTeamColor
    else
        print("colo2")
        return _G.ReaperEnemyColor
    end
end

function AddPlayerToESP(Player)
    if Player.Name ~= lplr.Name and Player:FindFirstChild("HumanoidRootPart") then
        ESP:Add(Player, {ColorDynamic = true})
    end
end


print("Starting Reaper v1.0")



if not getgenv().ESP then
    getgenv().ESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/noobscripter38493/kiriot-esp/main/ESP.lua"))()
end

if getgenv().ESP == nil then
    print("Failed to load Reaper UILIBS")
else
    -- Init parameters
    ESP.TeamMates = _G.ReaperTeamVisible

    -- Add methpods override
    ESP.Overrides["IsTeamMate"] = IsTeam
    ESP.Overrides["GetColor"] = GetColor

    -- Toggle
    ESP:Toggle(_G.ReaperESPEnabled)
end


-- Players --
for i,v in pairs(game.Players:GetChildren()) do
    AddPlayerToESP(v)
end

game.Players.PlayerAdded:Connect(function(v)
    print("New player connected")
    AddPlayerToESP(v)
end)

-- MapFolders Players --
if workspace.MapFolder and workspace.MapFolder.Players then
    for i,v in pairs(workspace.MapFolder.Players:GetChildren()) do
        AddPlayerToESP(v)
    end
    workspace.MapFolder.Players.ChildAdded:Connect(function(v)
        print("New char player connected")
        AddPlayerToESP(v)
    end)
end

-- ========================= UI =======================

-- Load if not already loaded
if not UILIBS then
    getgenv().UILIBS = loadstring(game:HttpGet("https://raw.githubusercontent.com/vozoid/ui-libraries/main/drawing/void/source.lua"))()
end

if UILIBS == nil then
    print("Failed to load Reaper GUI UILIBS")
--[[

    settings:
        distance
        max distance

        name
        box 
        tracers
        health

    design settings:
    
        box color
        outline color
]]
else
    print("Reaper GUI UI has been loaded")

    -- Disabled reaper gui when writing value on disableReaperGUI address
    if _G.disableReaperGUI ~= nil then
        print("Reaper GUI disabled")

    -- Create gui
    else
        print("Reaper GUI loading..")

        local status, err = pcall(function()
            -- ================================================= CREATE BASE WINDOW
            getgenv().UILIBS:Watermark("Reaper v1.0")
            local gui = getgenv().UILIBS:Load{
                Name = "Reaper v1.0",
                SizeX = 600,
                SizeY = 650,
                Theme = "Midnight",
                Extension = "json", -- config file extension
                Folder = ".reaper" -- config folder name
            }
            

            local espTab = gui:Tab("ESP")
            local designTab = gui:Tab("Design")
        
        
            -- ================================================= ESP SETTINGS
            local settingsSec = espTab:Section{
                Name = "ESP",
                Side = "Left"
            }
            if settingsSec ~= nil then -- Just to close the bracket in vscode

                -- Toggle esp
                settingsSec:Toggle{
                    Name = "ESP Enabled",
                    Flag = "ESP",
                    Default = _G.ReaperESPEnabled,
                    Callback  = function(bool)
                        _G.ReaperESPEnabled = bool
                        ESP:Toggle(bool)
                        -- Add all players again
                        if bool then
                            for i,v in pairs(game.Players:GetChildren()) do
                                AddPlayerToESP(v)
                            end
                            if workspace.MapFolder and workspace.MapFolder.Players then
                                for i,v in pairs(workspace.MapFolder.Players:GetChildren()) do
                                    AddPlayerToESP(v)
                                    print("add")
                                    print(v.Name)
                                end
                            end
                        end
                    end
                }
                
                settingsSec:Separator("")
                
                -- Modify team check
                settingsSec:Toggle{
                    Name = "Team Check Enable",
                    Flag = "Team Check",
                    Default = _G.ReaperTeamCheck,
                    Callback  = function(bool)
                        _G.ReaperTeamCheck = bool
                    end
                }
                settingsSec:Toggle{
                    Name = "Team Visible",
                    Flag = "Team Visibility",
                    Default = _G.ReaperTeamVisible,
                    Callback  = function(bool)
                        _G.ReaperTeamVisible = bool
                        ESP.TeamMates = _G.ReaperTeamVisible
                    end
                }
                settingsSec:Dropdown{
                    Name = "Dropdown",
                    Default = _G.ReaperTeamCheckType,
                    Content = {
                        "Color", -- Team color check
                        "Team", -- Team object check
                        "Permanent" -- Team permanent object check
                    },
                    Flag = "Team Check Type",
                    Callback = function(option)
                        _G.ReaperTeamCheckType = tostring(option)
                    end
                }
            end



            local keybindSec = espTab:Section{
                Name = "Keybinds & Configuration",
                Side = "Right"
            }
            if keybindSec ~= nil then -- Just to close the bracket in vscode
                keybindSec:Separator("")
            
                -- Toggle menu/esp
                UILIBS.holder.Visible = false -- Set to false for init of keybind
                keybindSec:Label("Toggle Menu")
                keybindSec:Keybind{
                    Blacklist = {Enum.UserInputType.MouseButton1},
                    Flag = "Toggle Menu",
                    Mode = "Toggle",
                    Callback = function(key, fromsetting)
                        UILIBS.holder.Visible = not UILIBS.holder.Visible
                        UILIBS.cursor.Visible = UILIBS.holder.Visible
                    end
                }
                keybindSec:Label("Toggle ESP")
                keybindSec:Keybind{
                    Blacklist = {Enum.UserInputType.MouseButton1},
                    Flag = "Toggle ESP",
                    Mode = "Toggle",
                    Callback = function(key, fromsetting)
                        _G.ReaperESPEnabled = not _G.ReaperESPEnabled
                    end
                }
            
            
                -- Save & load configuration
                keybindSec:Separator("")
                keybindSec:Button{
                    Name = "Load Config",
                    Callback  = function()
                        UILIBS:LoadConfig("config", true)
                    end
                }
            
                keybindSec:Button{
                    Name = "Save Config",
                    Callback  = function()
                        UILIBS:SaveConfig("config", true)
                    end
                }
            

                -- destruct gui 
                espTab:Section{
                    Name = "Self destruct",
                    Side = "Right"
                }:Button{
                    Name = "Self Destruct",
                    Callback  = function()
                        UILIBS:Unload() -- Destroy gui
                        ESP:Toggle(false) -- Toggle off ESP
                        print("Closed")
                        os.exit()
                    end
                }
            end
        
        
        
            -- ================================================= DESIGN SETTINGS
            local designSec = designTab:Section{
                Name = "Design",
                Side = "Left"
            }
            if (designSec ~= nil) then
                -- destruct gui 
                designTab:Section{
                    Name = "Self destruct",
                    Side = "Right"
                }:Button{
                    Name = "Self Destruct",
                    Callback  = function()
                            UILIBS:Unload() -- Destroy gui
                            ESP:Toggle(false) -- Toggle off ESP
                            print("Closed")
                            os.exit()
                    end
                }
            end

            
            -- =================================================================
        end)()
        print(err.code)
    end
end